# Production Stack for ApplyLens
# Full production-ready deployment with all services
#
# Usage:
#   1. Copy infra/.env.example to infra/.env and configure production values
#   2. docker-compose -f docker-compose.prod.yml up -d
#   3. Run migrations: docker-compose -f docker-compose.prod.yml exec api alembic upgrade head
#
# Services:
#   - PostgreSQL 16 (database)
#   - Elasticsearch 8.13 (search & analytics)
#   - Kibana 8.13 (data visualization)
#   - FastAPI (backend API)
#   - React/Vite (frontend)
#   - Nginx (reverse proxy)
#   - Prometheus (metrics)
#   - Grafana (monitoring)
#   - Cloudflared (tunnel - optional)

version: '3.8'

services:
  # =============================================================================
  # DATABASE
  # =============================================================================
  db:
    image: postgres:16-alpine
    container_name: applylens-db-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-applylens}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - db_data_prod:/var/lib/postgresql/data
      - ./infra/postgres/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-applylens}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - applylens-prod

  # =============================================================================
  # ELASTICSEARCH
  # =============================================================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: applylens-es-prod
    environment:
      - node.name=es-prod
      - cluster.name=applylens-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
    volumes:
      - es_data_prod:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - applylens-prod

  # =============================================================================
  # KIBANA
  # =============================================================================
  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: applylens-kibana-prod
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=applylens-kibana
      - SERVER_HOST=0.0.0.0
    ports:
      - "5601:5601"
    volumes:
      - ./infra/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - kibana_data_prod:/usr/share/kibana/data
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - applylens-prod

  # =============================================================================
  # API (FastAPI Backend)
  # =============================================================================
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile.prod
      args:
        - ENVIRONMENT=production
    container_name: applylens-api-prod
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-applylens}
      
      # API Configuration
      ENV: production
      API_HOST: 0.0.0.0
      API_PORT: ${API_PORT:-8003}
      CORS_ALLOW_ORIGINS: ${CORS_ALLOW_ORIGINS:-http://localhost:5175,http://localhost:3000}
      
      # Elasticsearch
      ES_ENABLED: ${ES_ENABLED:-true}
      ES_URL: http://elasticsearch:9200
      ES_RECREATE_ON_START: "false"
      ELASTICSEARCH_INDEX: ${ELASTICSEARCH_INDEX:-gmail_emails}
      
      # Google OAuth
      GOOGLE_CREDENTIALS: ${GOOGLE_CREDENTIALS:-/secrets/google.json}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI:-http://localhost:8003/auth/google/callback}
      GOOGLE_OAUTH_SCOPES: ${GOOGLE_OAUTH_SCOPES:-https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/userinfo.email openid}
      OAUTH_STATE_SECRET: ${OAUTH_STATE_SECRET}
      
      # Application
      DEFAULT_USER_EMAIL: ${DEFAULT_USER_EMAIL}
      CREATE_TABLES_ON_STARTUP: "0"
      
      # Monitoring
      PROMETHEUS_ENABLED: "true"
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${API_PORT:-8003}:8003"
    volumes:
      - ./infra/secrets:/secrets:ro
      - api_logs_prod:/var/log/applylens
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8003/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      applylens-prod:
        aliases:
          - applylens-api.internal

  # =============================================================================
  # WEB (Frontend)
  # =============================================================================
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile.prod
      args:
        - NODE_ENV=production
        - VITE_API_URL=${VITE_API_URL:-http://localhost:8003}
    container_name: applylens-web-prod
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${VITE_API_URL:-http://localhost:8003}
    ports:
      - "${WEB_PORT:-5175}:80"
    depends_on:
      - api
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - applylens-prod

  # =============================================================================
  # PROMETHEUS (Metrics Collection)
  # =============================================================================
  prometheus:
    image: prom/prometheus:v2.55.1
    container_name: applylens-prometheus-prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus:/etc/prometheus:ro
      - prometheus_data_prod:/prometheus
    depends_on:
      - api
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - applylens-prod

  # =============================================================================
  # GRAFANA (Monitoring Dashboard)
  # =============================================================================
  grafana:
    image: grafana/grafana:11.1.0
    container_name: applylens-grafana-prod
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL:-http://localhost:3000}
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - ./infra/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./infra/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - grafana_data_prod:/var/lib/grafana
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - applylens-prod

  # =============================================================================
  # NGINX (Reverse Proxy)
  # =============================================================================
  nginx:
    image: nginx:1.27-alpine
    container_name: applylens-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./infra/nginx/snippets:/etc/nginx/snippets:ro
      - ./infra/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs_prod:/var/log/nginx
    depends_on:
      - api
      - web
      - grafana
      - kibana
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      applylens-prod:
        aliases:
          - applylens.internal

  # =============================================================================
  # CLOUDFLARED (Optional - Cloudflare Tunnel)
  # =============================================================================
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: applylens-cloudflared-prod
    command: tunnel run applylens
    volumes:
      - ./infra/cloudflared:/etc/cloudflared:ro
    depends_on:
      - nginx
    restart: unless-stopped
    networks:
      - applylens-prod
    profiles:
      - cloudflare

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  db_data_prod:
    driver: local
  es_data_prod:
    driver: local
  kibana_data_prod:
    driver: local
  prometheus_data_prod:
    driver: local
  grafana_data_prod:
    driver: local
  api_logs_prod:
    driver: local
  nginx_logs_prod:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  applylens-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
