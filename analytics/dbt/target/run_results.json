{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.11.0b3", "generated_at": "2025-10-17T00:06:59.458831Z", "invocation_id": "145256a6-bdfc-46a5-8144-6859feeb0dc6", "invocation_started_at": "2025-10-17T00:06:34.585090Z", "env": {}}, "results": [{"status": "error", "timing": [{"name": "compile", "started_at": "2025-10-17T00:06:42.874210Z", "completed_at": "2025-10-17T00:06:42.886666Z"}, {"name": "execute", "started_at": "2025-10-17T00:06:42.899623Z", "completed_at": "2025-10-17T00:06:43.890068Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0271363258361816, "adapter_response": {}, "message": "Database Error in model m_backfill_p95_arima (models\\ml\\m_backfill_p95_arima.sql)\n  Syntax error: Unexpected keyword CREATE at [20:1]\n  compiled code at target\\run\\applylens_analytics\\models\\ml\\m_backfill_p95_arima.sql", "failures": null, "unique_id": "model.applylens_analytics.m_backfill_p95_arima", "compiled": true, "compiled_code": "\n\n-- BigQuery ML ARIMA model for backfill P95 duration forecasting\n-- Trains on historical backfill performance data to predict SLO violations\n-- Enables proactive alerting before performance degrades beyond SLO\n\nCREATE OR REPLACE MODEL `applylens-gmail-1759983601.ml.m_backfill_p95_arima`\nOPTIONS(\n  MODEL_TYPE='ARIMA_PLUS',\n  TIME_SERIES_TIMESTAMP_COL='d',\n  TIME_SERIES_DATA_COL='p95_duration_seconds',\n  HOLIDAY_REGION='US',\n  AUTO_ARIMA=TRUE,\n  DATA_FREQUENCY='DAILY'\n) AS\nSELECT \n  d,\n  p95_duration_seconds\nFROM `applylens-gmail-1759983601.marts.mrt_backfill_slo`\nWHERE d < CURRENT_DATE()\n  AND p95_duration_seconds IS NOT NULL\nORDER BY d", "relation_name": "`applylens-gmail-1759983601`.`gmail_raw_stg_ml`.`m_backfill_p95_arima`", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-10-17T00:06:42.869308Z", "completed_at": "2025-10-17T00:06:42.880124Z"}, {"name": "execute", "started_at": "2025-10-17T00:06:42.880476Z", "completed_at": "2025-10-17T00:06:43.943031Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.08290433883667, "adapter_response": {}, "message": "Database Error in model m_email_count_arima (models\\ml\\m_email_count_arima.sql)\n  Syntax error: Unexpected keyword CREATE at [14:5]\n  compiled code at target\\run\\applylens_analytics\\models\\ml\\m_email_count_arima.sql", "failures": null, "unique_id": "model.applylens_analytics.m_email_count_arima", "compiled": true, "compiled_code": "\n\n-- BigQuery ML ARIMA model for email count forecasting\n-- Trains on historical email volume data to predict future traffic patterns\n-- Useful for capacity planning and anomaly detection\n\nSELECT \n  d,\n  emails\nFROM `applylens-gmail-1759983601.applylens.mrt_risk_daily`\nWHERE d < CURRENT_DATE()\n  AND emails IS NOT NULL\nORDER BY d", "relation_name": "`applylens-gmail-1759983601`.`gmail_raw_stg_ml`.`m_email_count_arima`", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-10-17T00:06:42.878586Z", "completed_at": "2025-10-17T00:06:42.901638Z"}, {"name": "execute", "started_at": "2025-10-17T00:06:42.903703Z", "completed_at": "2025-10-17T00:06:43.943855Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0814576148986816, "adapter_response": {}, "message": "Database Error in model m_avg_risk_arima (models\\ml\\m_avg_risk_arima.sql)\n  Syntax error: Unexpected keyword CREATE at [20:1]\n  compiled code at target\\run\\applylens_analytics\\models\\ml\\m_avg_risk_arima.sql", "failures": null, "unique_id": "model.applylens_analytics.m_avg_risk_arima", "compiled": true, "compiled_code": "\n\n-- BigQuery ML ARIMA model for average risk score forecasting\n-- Trains on historical risk_daily data to predict future avg_risk trends\n-- Model automatically handles seasonality and trend components\n\nCREATE OR REPLACE MODEL `applylens-gmail-1759983601.ml.m_avg_risk_arima`\nOPTIONS(\n  MODEL_TYPE='ARIMA_PLUS',\n  TIME_SERIES_TIMESTAMP_COL='d',\n  TIME_SERIES_DATA_COL='avg_risk',\n  HOLIDAY_REGION='US',\n  AUTO_ARIMA=TRUE,\n  DATA_FREQUENCY='DAILY'\n) AS\nSELECT \n  d,\n  avg_risk\nFROM `applylens-gmail-1759983601.marts.mrt_risk_daily`\nWHERE d < CURRENT_DATE()\n  AND avg_risk IS NOT NULL\nORDER BY d", "relation_name": "`applylens-gmail-1759983601`.`gmail_raw_stg_ml`.`m_avg_risk_arima`", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-10-17T00:06:42.876201Z", "completed_at": "2025-10-17T00:06:42.901342Z"}, {"name": "execute", "started_at": "2025-10-17T00:06:42.901990Z", "completed_at": "2025-10-17T00:06:44.077728Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2128028869628906, "adapter_response": {}, "message": "Database Error in model anomaly_detection (models\\ml\\anomaly_detection.sql)\n  Not found: Dataset applylens-gmail-1759983601:marts was not found in location US\n  compiled code at target\\run\\applylens_analytics\\models\\ml\\anomaly_detection.sql", "failures": null, "unique_id": "model.applylens_analytics.anomaly_detection", "compiled": true, "compiled_code": "\n\n-- Anomaly detection across all metrics\n-- Compares actual values to ARIMA predictions and flags values outside prediction intervals\n\nWITH avg_risk_anomalies AS (\n  SELECT\n    a.d,\n    'avg_risk' AS metric,\n    a.avg_risk AS actual_value,\n    p.predicted_avg_risk AS predicted_value,\n    p.lower_bound,\n    p.upper_bound,\n    CASE\n      WHEN a.avg_risk IS NULL OR p.predicted_avg_risk IS NULL THEN 'unknown'\n      WHEN a.avg_risk > p.upper_bound THEN 'high'\n      WHEN a.avg_risk < p.lower_bound THEN 'low'\n      ELSE 'normal'\n    END AS severity,\n    ABS(a.avg_risk - p.predicted_avg_risk) AS residual\n  FROM `applylens-gmail-1759983601.marts.mrt_risk_daily` a\n  LEFT JOIN `applylens-gmail-1759983601.ml.pred_avg_risk` p\n    ON a.d = p.d\n  WHERE a.d >= DATE_SUB(CURRENT_DATE(), INTERVAL 60 DAY)\n),\n\nemail_count_anomalies AS (\n  SELECT\n    a.d,\n    'email_count' AS metric,\n    a.emails AS actual_value,\n    p.predicted_email_count AS predicted_value,\n    p.lower_bound,\n    p.upper_bound,\n    CASE\n      WHEN a.emails IS NULL OR p.predicted_email_count IS NULL THEN 'unknown'\n      WHEN a.emails > p.upper_bound THEN 'high'\n      WHEN a.emails < p.lower_bound THEN 'low'\n      ELSE 'normal'\n    END AS severity,\n    ABS(a.emails - p.predicted_email_count) AS residual\n  FROM `applylens-gmail-1759983601.marts.mrt_risk_daily` a\n  LEFT JOIN `applylens-gmail-1759983601.ml.pred_email_count` p\n    ON a.d = p.d\n  WHERE a.d >= DATE_SUB(CURRENT_DATE(), INTERVAL 60 DAY)\n),\n\nparity_ratio_anomalies AS (\n  SELECT\n    a.d,\n    'parity_ratio' AS metric,\n    a.mismatch_ratio AS actual_value,\n    p.predicted_parity_ratio AS predicted_value,\n    p.lower_bound,\n    p.upper_bound,\n    CASE\n      WHEN a.mismatch_ratio IS NULL OR p.predicted_parity_ratio IS NULL THEN 'unknown'\n      WHEN a.mismatch_ratio > p.upper_bound THEN 'high'\n      WHEN a.mismatch_ratio < p.lower_bound THEN 'low'\n      ELSE 'normal'\n    END AS severity,\n    ABS(a.mismatch_ratio - p.predicted_parity_ratio) AS residual\n  FROM `applylens-gmail-1759983601.marts.mrt_parity_drift` a\n  LEFT JOIN `applylens-gmail-1759983601.ml.pred_parity_ratio` p\n    ON a.d = p.d\n  WHERE a.d >= DATE_SUB(CURRENT_DATE(), INTERVAL 60 DAY)\n),\n\nbackfill_p95_anomalies AS (\n  SELECT\n    a.d,\n    'backfill_p95' AS metric,\n    a.p95_duration_seconds AS actual_value,\n    p.predicted_p95_seconds AS predicted_value,\n    p.lower_bound,\n    p.upper_bound,\n    CASE\n      WHEN a.p95_duration_seconds IS NULL OR p.predicted_p95_seconds IS NULL THEN 'unknown'\n      WHEN a.p95_duration_seconds > p.upper_bound THEN 'high'\n      WHEN a.p95_duration_seconds < p.lower_bound THEN 'low'\n      ELSE 'normal'\n    END AS severity,\n    ABS(a.p95_duration_seconds - p.predicted_p95_seconds) AS residual\n  FROM `applylens-gmail-1759983601.marts.mrt_backfill_slo` a\n  LEFT JOIN `applylens-gmail-1759983601.ml.pred_backfill_p95` p\n    ON a.d = p.d\n  WHERE a.d >= DATE_SUB(CURRENT_DATE(), INTERVAL 60 DAY)\n)\n\nSELECT * FROM avg_risk_anomalies\nUNION ALL\nSELECT * FROM email_count_anomalies\nUNION ALL\nSELECT * FROM parity_ratio_anomalies\nUNION ALL\nSELECT * FROM backfill_p95_anomalies\nORDER BY d DESC, metric", "relation_name": "`applylens-gmail-1759983601`.`gmail_raw_stg_ml`.`anomaly_detection`", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-10-17T00:06:43.899175Z", "completed_at": "2025-10-17T00:06:43.911394Z"}, {"name": "execute", "started_at": "2025-10-17T00:06:43.911781Z", "completed_at": "2025-10-17T00:06:44.720424Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.8250641822814941, "adapter_response": {}, "message": "Database Error in model m_parity_ratio_arima (models\\ml\\m_parity_ratio_arima.sql)\n  Syntax error: Unexpected keyword CREATE at [20:1]\n  compiled code at target\\run\\applylens_analytics\\models\\ml\\m_parity_ratio_arima.sql", "failures": null, "unique_id": "model.applylens_analytics.m_parity_ratio_arima", "compiled": true, "compiled_code": "\n\n-- BigQuery ML ARIMA model for parity drift ratio forecasting\n-- Trains on historical DB\u2194ES consistency metrics to predict drift trends\n-- Helps detect data quality degradation before it becomes critical\n\nCREATE OR REPLACE MODEL `applylens-gmail-1759983601.ml.m_parity_ratio_arima`\nOPTIONS(\n  MODEL_TYPE='ARIMA_PLUS',\n  TIME_SERIES_TIMESTAMP_COL='d',\n  TIME_SERIES_DATA_COL='mismatch_ratio',\n  HOLIDAY_REGION='US',\n  AUTO_ARIMA=TRUE,\n  DATA_FREQUENCY='DAILY'\n) AS\nSELECT \n  d,\n  mismatch_ratio\nFROM `applylens-gmail-1759983601.marts.mrt_parity_drift`\nWHERE d < CURRENT_DATE()\n  AND mismatch_ratio IS NOT NULL\nORDER BY d", "relation_name": "`applylens-gmail-1759983601`.`gmail_raw_stg_ml`.`m_parity_ratio_arima`", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-10-17T00:06:44.083541Z", "completed_at": "2025-10-17T00:06:44.085557Z"}, {"name": "execute", "started_at": "2025-10-17T00:06:44.085801Z", "completed_at": "2025-10-17T00:06:45.193651Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1138710975646973, "adapter_response": {}, "message": "Database Error in model pred_avg_risk (models\\ml\\pred_avg_risk.sql)\n  Not found: Dataset applylens-gmail-1759983601:ml was not found in location US\n  compiled code at target\\run\\applylens_analytics\\models\\ml\\pred_avg_risk.sql", "failures": null, "unique_id": "model.applylens_analytics.pred_avg_risk", "compiled": true, "compiled_code": "\n\n-- Generate 7-day forecast for average risk score\n-- Uses trained ARIMA model to predict future risk trends\n\nSELECT\n  forecast_timestamp AS d,\n  forecast_value AS predicted_avg_risk,\n  prediction_interval_lower_bound AS lower_bound,\n  prediction_interval_upper_bound AS upper_bound\nFROM ML.FORECAST(\n  MODEL `applylens-gmail-1759983601.ml.m_avg_risk_arima`,\n  STRUCT(7 AS horizon, 0.9 AS confidence_level)\n)\nORDER BY forecast_timestamp", "relation_name": "`applylens-gmail-1759983601`.`gmail_raw_stg_ml`.`pred_avg_risk`", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-10-17T00:06:44.726212Z", "completed_at": "2025-10-17T00:06:44.728333Z"}, {"name": "execute", "started_at": "2025-10-17T00:06:44.728553Z", "completed_at": "2025-10-17T00:06:45.600319Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.8778464794158936, "adapter_response": {}, "message": "Database Error in model pred_backfill_p95 (models\\ml\\pred_backfill_p95.sql)\n  Not found: Dataset applylens-gmail-1759983601:ml was not found in location US\n  compiled code at target\\run\\applylens_analytics\\models\\ml\\pred_backfill_p95.sql", "failures": null, "unique_id": "model.applylens_analytics.pred_backfill_p95", "compiled": true, "compiled_code": "\n\n-- Generate 7-day forecast for backfill P95 duration\n-- Uses trained ARIMA model to predict SLO violations before they occur\n\nSELECT\n  forecast_timestamp AS d,\n  forecast_value AS predicted_p95_seconds,\n  prediction_interval_lower_bound AS lower_bound,\n  prediction_interval_upper_bound AS upper_bound\nFROM ML.FORECAST(\n  MODEL `applylens-gmail-1759983601.ml.m_backfill_p95_arima`,\n  STRUCT(7 AS horizon, 0.9 AS confidence_level)\n)\nORDER BY forecast_timestamp", "relation_name": "`applylens-gmail-1759983601`.`gmail_raw_stg_ml`.`pred_backfill_p95`", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-10-17T00:06:45.199552Z", "completed_at": "2025-10-17T00:06:45.201980Z"}, {"name": "execute", "started_at": "2025-10-17T00:06:45.202246Z", "completed_at": "2025-10-17T00:06:46.220708Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0249629020690918, "adapter_response": {}, "message": "Database Error in model pred_email_count (models\\ml\\pred_email_count.sql)\n  Not found: Model applylens-gmail-1759983601:gmail_raw_stg.m_email_count_arima\n  compiled code at target\\run\\applylens_analytics\\models\\ml\\pred_email_count.sql", "failures": null, "unique_id": "model.applylens_analytics.pred_email_count", "compiled": true, "compiled_code": "\n\n-- Generate 7-day forecast for email volume\n-- Uses trained ARIMA model to predict traffic patterns for capacity planning\n\nSELECT\n  forecast_timestamp AS d,\n  forecast_value AS predicted_email_count,\n  prediction_interval_lower_bound AS lower_bound,\n  prediction_interval_upper_bound AS upper_bound\nFROM ML.FORECAST(\n  MODEL `applylens-gmail-1759983601.gmail_raw_stg.m_email_count_arima`,\n  STRUCT(7 AS horizon, 0.9 AS confidence_level)\n)\nORDER BY forecast_timestamp", "relation_name": "`applylens-gmail-1759983601`.`gmail_raw_stg_ml`.`pred_email_count`", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-10-17T00:06:45.606150Z", "completed_at": "2025-10-17T00:06:45.608863Z"}, {"name": "execute", "started_at": "2025-10-17T00:06:45.609124Z", "completed_at": "2025-10-17T00:06:46.385663Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.7832987308502197, "adapter_response": {}, "message": "Database Error in model pred_parity_ratio (models\\ml\\pred_parity_ratio.sql)\n  Not found: Dataset applylens-gmail-1759983601:ml was not found in location US\n  compiled code at target\\run\\applylens_analytics\\models\\ml\\pred_parity_ratio.sql", "failures": null, "unique_id": "model.applylens_analytics.pred_parity_ratio", "compiled": true, "compiled_code": "\n\n-- Generate 7-day forecast for parity drift ratio\n-- Uses trained ARIMA model to predict data quality degradation\n\nSELECT\n  forecast_timestamp AS d,\n  forecast_value AS predicted_parity_ratio,\n  prediction_interval_lower_bound AS lower_bound,\n  prediction_interval_upper_bound AS upper_bound\nFROM ML.FORECAST(\n  MODEL `applylens-gmail-1759983601.ml.m_parity_ratio_arima`,\n  STRUCT(7 AS horizon, 0.9 AS confidence_level)\n)\nORDER BY forecast_timestamp", "relation_name": "`applylens-gmail-1759983601`.`gmail_raw_stg_ml`.`pred_parity_ratio`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-17T00:06:43.957143Z", "completed_at": "2025-10-17T00:06:43.963313Z"}, {"name": "execute", "started_at": "2025-10-17T00:06:43.963587Z", "completed_at": "2025-10-17T00:06:47.330527Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.3751418590545654, "adapter_response": {"_message": "CREATE TABLE (30.0 rows, 0 processed)", "code": "CREATE TABLE", "rows_affected": 30, "bytes_processed": 0, "bytes_billed": 0, "location": "US", "project_id": "applylens-gmail-1759983601", "job_id": "2acdd559-cbf7-4b13-be9d-b9934718bada", "slot_ms": 365}, "message": "CREATE TABLE (30.0 rows, 0 processed)", "failures": null, "unique_id": "model.applylens_analytics.mrt_parity_drift", "compiled": true, "compiled_code": "\n\n-- Placeholder for parity drift tracking\n-- This will be populated when parity check logs are exported to BigQuery\n-- For now, generate stub data showing 0 mismatches\n\nwith date_spine as (\n  select date_sub(current_date(), interval day_offset day) as d\n  from unnest(generate_array(0, 29)) as day_offset\n),\n\n-- TODO: Replace with actual parity check results table\n-- Expected structure: check_timestamp, total_checked, total_mismatches, field mismatches, etc.\n-- Source: analytics.public_parity_checks (when implemented)\n\nparity_stub as (\n  select\n    d,\n    0 as total_checked,\n    0 as total_mismatches,\n    0.0 as mismatch_ratio,\n    0 as risk_score_mismatches,\n    0 as expires_at_mismatches,\n    0 as category_mismatches,\n    TIMESTAMP(d) as last_check_at\n  from date_spine\n)\n\nselect\n  d,\n  total_checked,\n  total_mismatches,\n  ROUND(mismatch_ratio, 4) as mismatch_ratio,\n  risk_score_mismatches,\n  expires_at_mismatches,\n  category_mismatches,\n  last_check_at,\n  \n  -- SLO status\n  CASE\n    WHEN mismatch_ratio = 0 THEN 'healthy'\n    WHEN mismatch_ratio < 0.001 THEN 'acceptable'\n    WHEN mismatch_ratio < 0.005 THEN 'warning'\n    ELSE 'critical'\n  END as slo_status\n\nfrom parity_stub\norder by d DESC\n\n-- IMPLEMENTATION NOTE:\n-- To populate this model with real data:\n-- 1. Export parity check results from check_parity.py to BigQuery\n-- 2. Create table: analytics.public_parity_checks\n-- 3. Update this model to reference that table\n-- 4. Example export command:\n--    python scripts/check_parity.py --output parity.json\n--    bq load --source_format=NEWLINE_DELIMITED_JSON \\\n--      applylens.parity_checks parity.json", "relation_name": "`applylens-gmail-1759983601`.`gmail_raw_stg_marts`.`mrt_parity_drift`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-17T00:06:46.226511Z", "completed_at": "2025-10-17T00:06:46.228862Z"}, {"name": "execute", "started_at": "2025-10-17T00:06:46.229102Z", "completed_at": "2025-10-17T00:06:47.472220Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2474422454833984, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "US", "project_id": "applylens-gmail-1759983601", "job_id": "cfc2a0fa-def0-41a5-a56d-eb6404b44a7e", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.applylens_analytics.stg_applications", "compiled": true, "compiled_code": "\n\nwith src as (\n  select * from `applylens-gmail-1759983601`.`applylens`.`public_applications`\n)\n\nselect\n  -- Primary key\n  id,\n  \n  -- Foreign keys\n  user_id,\n  \n  -- Application details\n  company,\n  role,\n  source,\n  status,\n  \n  -- Timestamps\n  created_at,\n  updated_at,\n  \n  -- Date dimensions\n  DATE(created_at) as application_date,\n  EXTRACT(YEAR FROM created_at) as application_year,\n  EXTRACT(MONTH FROM created_at) as application_month,\n  EXTRACT(WEEK FROM created_at) as application_week,\n  \n  -- Status categories\n  CASE\n    WHEN status IN ('accepted', 'offer') THEN 'success'\n    WHEN status IN ('rejected', 'closed') THEN 'closed'\n    WHEN status IN ('interviewing', 'phone_screen') THEN 'active'\n    WHEN status IN ('applied', 'submitted') THEN 'pending'\n    ELSE 'other'\n  END as status_category\n\nfrom src\nwhere created_at IS NOT NULL  -- Filter out invalid records", "relation_name": "`applylens-gmail-1759983601`.`gmail_raw_stg_staging`.`stg_applications`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-17T00:06:43.954868Z", "completed_at": "2025-10-17T00:06:43.961451Z"}, {"name": "execute", "started_at": "2025-10-17T00:06:43.961750Z", "completed_at": "2025-10-17T00:06:47.476048Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.5238263607025146, "adapter_response": {"_message": "CREATE TABLE (30.0 rows, 0 processed)", "code": "CREATE TABLE", "rows_affected": 30, "bytes_processed": 0, "bytes_billed": 0, "location": "US", "project_id": "applylens-gmail-1759983601", "job_id": "989c31a0-a26f-4fa2-8a92-352c406efc17", "slot_ms": 613}, "message": "CREATE TABLE (30.0 rows, 0 processed)", "failures": null, "unique_id": "model.applylens_analytics.mrt_backfill_slo", "compiled": true, "compiled_code": "\n\n-- Placeholder for backfill SLO tracking\n-- This will be populated when backfill job logs are exported to BigQuery\n-- For now, generate stub data showing 0 backfills\n\nwith date_spine as (\n  select date_sub(current_date(), interval day_offset day) as d\n  from unnest(generate_array(0, 29)) as day_offset\n),\n\n-- TODO: Replace with actual backfill job logs\n-- Expected structure: job_timestamp, duration_seconds, emails_processed, batch_size, etc.\n-- Source: analytics.public_backfill_jobs (when implemented)\n\nbackfill_stub as (\n  select\n    d,\n    0 as backfill_count,\n    0.0 as avg_duration_seconds,\n    0.0 as p50_duration_seconds,\n    0.0 as p95_duration_seconds,\n    0.0 as p99_duration_seconds,\n    0 as total_emails_processed,\n    0 as failed_count\n  from date_spine\n)\n\nselect\n  d,\n  backfill_count,\n  ROUND(avg_duration_seconds, 2) as avg_duration_seconds,\n  ROUND(p50_duration_seconds, 2) as p50_duration_seconds,\n  ROUND(p95_duration_seconds, 2) as p95_duration_seconds,\n  ROUND(p99_duration_seconds, 2) as p99_duration_seconds,\n  total_emails_processed,\n  failed_count,\n  \n  -- SLO status (p95 < 300 seconds = 5 minutes)\n  CASE\n    WHEN backfill_count = 0 THEN 'no_data'\n    WHEN p95_duration_seconds < 300 THEN 'healthy'\n    WHEN p95_duration_seconds < 420 THEN 'warning'  -- 7 minutes\n    ELSE 'critical'\n  END as slo_status,\n  \n  -- Success rate\n  CASE\n    WHEN backfill_count = 0 THEN NULL\n    ELSE ROUND((backfill_count - failed_count) * 100.0 / backfill_count, 2)\n  END as success_rate_pct\n\nfrom backfill_stub\norder by d DESC\n\n-- IMPLEMENTATION NOTE:\n-- To populate this model with real data:\n-- 1. Instrument analyze_risk.py to log job metrics\n-- 2. Export job logs to BigQuery table: analytics.public_backfill_jobs\n-- 3. Update this model to calculate percentiles from actual durations\n-- 4. Example instrumentation:\n--    from app.metrics import backfill_duration_seconds\n--    with backfill_duration_seconds.time():\n--        # Run backfill\n--        pass\n--    # Export prometheus metrics to BigQuery (via remote write or exporter)", "relation_name": "`applylens-gmail-1759983601`.`gmail_raw_stg_marts`.`mrt_backfill_slo`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-17T00:06:46.391584Z", "completed_at": "2025-10-17T00:06:46.393602Z"}, {"name": "execute", "started_at": "2025-10-17T00:06:46.393850Z", "completed_at": "2025-10-17T00:06:47.943551Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.553659439086914, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "US", "project_id": "applylens-gmail-1759983601", "job_id": "ec78fda2-bd14-4062-a016-bc239b8de269", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.applylens_analytics.stg_emails", "compiled": true, "compiled_code": "\n\nwith src as (\n  select * from `applylens-gmail-1759983601`.`applylens`.`public_emails`\n)\n\nselect\n  -- Primary key\n  id,\n  \n  -- Timestamps\n  received_at,\n  created_at,\n  updated_at,\n  \n  -- Email metadata\n  sender,\n  subject,\n  REGEXP_EXTRACT(sender, r'@(.+)$') as sender_domain,\n  \n  -- Risk scoring (Phase 12.1)\n  risk_score,\n  category,\n  expires_at,\n  \n  -- Features JSON parsing (Phase 12.1)\n  JSON_VALUE(features_json, '$.computed_at') as features_computed_at,\n  JSON_VALUE(features_json, '$.source') as features_source,\n  CAST(JSON_VALUE(features_json, '$.confidence') AS FLOAT64) as source_confidence,\n  \n  -- Date dimensions\n  DATE(received_at) as received_date,\n  EXTRACT(YEAR FROM received_at) as received_year,\n  EXTRACT(MONTH FROM received_at) as received_month,\n  EXTRACT(WEEK FROM received_at) as received_week,\n  EXTRACT(DAYOFWEEK FROM received_at) as received_dayofweek,\n  \n  -- Risk categories\n  CASE\n    WHEN risk_score IS NULL THEN 'unscored'\n    WHEN risk_score < 30 THEN 'low'\n    WHEN risk_score < 60 THEN 'medium'\n    WHEN risk_score < 90 THEN 'high'\n    ELSE 'critical'\n  END as risk_bucket\n\nfrom src", "relation_name": "`applylens-gmail-1759983601`.`gmail_raw_stg_staging`.`stg_emails`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-17T00:06:47.334138Z", "completed_at": "2025-10-17T00:06:47.336769Z"}, {"name": "execute", "started_at": "2025-10-17T00:06:47.336993Z", "completed_at": "2025-10-17T00:06:48.854718Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5227456092834473, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "US", "project_id": "applylens-gmail-1759983601", "job_id": "055b4403-66fc-4b11-9a9d-63bb51024f9e", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.applylens_analytics.stg_gmail__labels", "compiled": true, "compiled_code": "\n\n/*\n  Staging model for Fivetran Gmail labels.\n  Provides label metadata for categorization and filtering.\n  \n  Depends on: Fivetran Gmail connector \u2192 gmail_raw.labels\n*/\n\nwith base as (\n  select\n    l.id as label_id,\n    l.name as label_name,\n    l.type as label_type,\n    cast(null as string) as message_list_visibility,\n    cast(null as string) as label_list_visibility,\n    l._fivetran_synced as synced_at\n  from `applylens-gmail-1759983601`.`gmail`.`label` l\n  where l._fivetran_deleted is false\n)\n\nselect * from base", "relation_name": "`applylens-gmail-1759983601`.`gmail_raw_stg_gmail_raw_stg`.`stg_gmail__labels`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-17T00:06:47.484446Z", "completed_at": "2025-10-17T00:06:47.487095Z"}, {"name": "execute", "started_at": "2025-10-17T00:06:47.487417Z", "completed_at": "2025-10-17T00:06:49.089149Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.6084823608398438, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "US", "project_id": "applylens-gmail-1759983601", "job_id": "8ea11290-e281-461f-a873-1aeda7a3ace5", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.applylens_analytics.stg_gmail__threads", "compiled": true, "compiled_code": "\n\n/*\n  Staging model for Fivetran Gmail threads.\n  Groups messages into conversation threads.\n  \n  Depends on: Fivetran Gmail connector \u2192 gmail_raw.threads\n*/\n\nwith base as (\n  select\n    t.id as thread_id,\n    t.history_id,\n    cast(null as string) as thread_snippet,\n    cast(null as int64) as message_count,\n    t._fivetran_synced as synced_at\n  from `applylens-gmail-1759983601`.`gmail`.`thread` t\n  where t._fivetran_deleted is false\n)\n\nselect * from base", "relation_name": "`applylens-gmail-1759983601`.`gmail_raw_stg_gmail_raw_stg`.`stg_gmail__threads`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-17T00:06:47.478047Z", "completed_at": "2025-10-17T00:06:47.482487Z"}, {"name": "execute", "started_at": "2025-10-17T00:06:47.482979Z", "completed_at": "2025-10-17T00:06:49.258358Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.783599853515625, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "US", "project_id": "applylens-gmail-1759983601", "job_id": "1dc5a1f0-399e-420f-ac15-6304fde0cc27", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.applylens_analytics.stg_gmail__messages", "compiled": true, "compiled_code": "\n\n/*\n  Staging model for Fivetran Gmail messages.\n  Maps raw Fivetran schema to ApplyLens analytics schema.\n  \n  Depends on: Fivetran Gmail connector \u2192 gmail.message, gmail.payload_header\n  \n  Note: Fivetran stores email headers in a separate payload_header table.\n  We pivot the key-value pairs to extract From, To, Subject, etc.\n*/\n\nwith msg_base as (\n  select\n    msg.id as message_id,\n    msg.thread_id,\n    timestamp_millis(cast(msg.internal_date as int64)) as received_ts,\n    msg.snippet,\n    msg.size_estimate as size_bytes,\n    msg._fivetran_synced as synced_at\n  from `applylens-gmail-1759983601`.`gmail`.`message` as msg\n  where msg._fivetran_deleted is false\n),\n\n-- Pivot headers from key-value pairs to columns\nheaders as (\n  select\n    message_id,\n    max(case when lower(name) = 'from' then value end) as from_email,\n    max(case when lower(name) = 'to' then value end) as to_emails,\n    max(case when lower(name) = 'cc' then value end) as cc_emails,\n    max(case when lower(name) = 'bcc' then value end) as bcc_emails,\n    max(case when lower(name) = 'subject' then value end) as subject\n  from `applylens-gmail-1759983601`.`gmail`.`payload_header`\n  where lower(name) in ('from', 'to', 'cc', 'bcc', 'subject')\n  group by 1\n),\n\n-- Join labels (simplified for now - just concatenate label IDs)\nmsg_labels as (\n  select\n    message_id,\n    string_agg(label_id, ',') as label_ids\n  from `applylens-gmail-1759983601`.`gmail`.`message_label`\n  group by 1\n)\n\nselect\n  msg.message_id,\n  msg.thread_id,\n  msg.received_ts,\n  msg.snippet,\n  h.from_email,\n  h.to_emails,\n  h.cc_emails,\n  h.bcc_emails,\n  h.subject,\n  lbl.label_ids,\n  msg.size_bytes,\n  msg.synced_at\nfrom msg_base msg\nleft join headers h on msg.message_id = h.message_id\nleft join msg_labels lbl on msg.message_id = lbl.message_id", "relation_name": "`applylens-gmail-1759983601`.`gmail_raw_stg_gmail_raw_stg`.`stg_gmail__messages`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-17T00:06:47.947150Z", "completed_at": "2025-10-17T00:06:47.949864Z"}, {"name": "execute", "started_at": "2025-10-17T00:06:47.950128Z", "completed_at": "2025-10-17T00:06:52.243175Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 4.297733783721924, "adapter_response": {"_message": "CREATE TABLE (60.0 rows, 3.0 KiB processed)", "code": "CREATE TABLE", "rows_affected": 60, "bytes_processed": 3060, "bytes_billed": 10485760, "location": "US", "project_id": "applylens-gmail-1759983601", "job_id": "f5984099-e0ab-497b-bf02-61e25e407694", "slot_ms": 24117}, "message": "CREATE TABLE (60.0 rows, 3.0 KiB processed)", "failures": null, "unique_id": "model.applylens_analytics.mrt_risk_daily", "compiled": true, "compiled_code": "\n\nwith daily_emails as (\n  select\n    received_date as d,\n    COUNT(*) as emails,\n    COUNT(risk_score) as emails_scored,\n    AVG(risk_score) as avg_risk,\n    MIN(risk_score) as min_risk,\n    MAX(risk_score) as max_risk,\n    \n    -- Risk distribution\n    COUNTIF(risk_bucket = 'low') as low_risk_count,\n    COUNTIF(risk_bucket = 'medium') as medium_risk_count,\n    COUNTIF(risk_bucket = 'high') as high_risk_count,\n    COUNTIF(risk_bucket = 'critical') as critical_risk_count,\n    COUNTIF(risk_bucket = 'unscored') as unscored_count,\n    \n    -- Category distribution\n    COUNTIF(category = 'recruiter') as recruiter_count,\n    COUNTIF(category = 'interview') as interview_count,\n    COUNTIF(category = 'offer') as offer_count,\n    COUNTIF(category = 'rejection') as rejection_count,\n    \n    -- Sender domains (top 5 by volume)\n    ARRAY_AGG(DISTINCT sender_domain ORDER BY sender_domain LIMIT 5) as top_domains\n\n  from `applylens-gmail-1759983601`.`gmail_raw_stg_staging`.`stg_emails`\n  where received_date IS NOT NULL\n  group by received_date\n)\n\nselect\n  d,\n  emails,\n  emails_scored,\n  ROUND(avg_risk, 2) as avg_risk,\n  min_risk,\n  max_risk,\n  low_risk_count,\n  medium_risk_count,\n  high_risk_count,\n  critical_risk_count,\n  unscored_count,\n  recruiter_count,\n  interview_count,\n  offer_count,\n  rejection_count,\n  top_domains,\n  \n  -- Coverage metrics\n  ROUND(emails_scored * 100.0 / NULLIF(emails, 0), 2) as coverage_pct,\n  ROUND(high_risk_count * 100.0 / NULLIF(emails, 0), 2) as high_risk_pct,\n  ROUND(critical_risk_count * 100.0 / NULLIF(emails, 0), 2) as critical_risk_pct\n\nfrom daily_emails\n-- Note: ORDER BY removed for partitioned table compatibility", "relation_name": "`applylens-gmail-1759983601`.`gmail_raw_stg_marts`.`mrt_risk_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-17T00:06:49.268247Z", "completed_at": "2025-10-17T00:06:49.275583Z"}, {"name": "execute", "started_at": "2025-10-17T00:06:49.275900Z", "completed_at": "2025-10-17T00:06:53.827839Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 4.565331220626831, "adapter_response": {"_message": "CREATE TABLE (4.0 rows, 2.4 MiB processed)", "code": "CREATE TABLE", "rows_affected": 4, "bytes_processed": 2492281, "bytes_billed": 31457280, "location": "US", "project_id": "applylens-gmail-1759983601", "job_id": "e87196c4-b205-4227-9395-5a1ec005788d", "slot_ms": 55110}, "message": "CREATE TABLE (4.0 rows, 2.4 MiB processed)", "failures": null, "unique_id": "model.applylens_analytics.mart_categories_30d", "compiled": true, "compiled_code": "\n\n/*\n  Email category distribution in the last 30 days.\n  \n  Categories:\n  - PROMOTIONS: Marketing emails\n  - UPDATES: Notifications, receipts\n  - SOCIAL: Social network updates\n  - FORUMS: Mailing lists, forums\n  - PRIMARY: Everything else\n  \n  Used by: Grafana dashboard, API /metrics/profile/categories_30d\n  Updates: Nightly via GitHub Actions\n*/\n\nwith windowed as (\n  select \n    message_id,\n    label_ids,\n    size_bytes\n  from `applylens-gmail-1759983601`.`gmail_raw_stg_gmail_raw_stg`.`stg_gmail__messages`\n  where received_ts >= timestamp_sub(current_timestamp(), interval 30 day)\n),\n\n-- Join with labels to get label names\nmsg_with_labels as (\n  select\n    w.message_id,\n    w.size_bytes,\n    case\n      when w.label_ids is null then 'primary'\n      when w.label_ids like '%CATEGORY_PROMOTIONS%' then 'promotions'\n      when w.label_ids like '%CATEGORY_UPDATES%' then 'updates'\n      when w.label_ids like '%CATEGORY_SOCIAL%' then 'social'\n      when w.label_ids like '%CATEGORY_FORUMS%' then 'forums'\n      when w.label_ids like '%CATEGORY_PERSONAL%' then 'primary'\n      else 'primary'\n    end as category\n  from windowed w\n)\n\nselect\n  category,\n  count(*) as messages_30d,\n  round(count(*) * 100.0 / sum(count(*)) over(), 2) as pct_of_total,\n  round(sum(size_bytes) / 1024 / 1024, 2) as total_size_mb\nfrom msg_with_labels\ngroup by 1\norder by messages_30d desc", "relation_name": "`applylens-gmail-1759983601`.`gmail_raw_stg_gmail_marts`.`mart_categories_30d`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-17T00:06:49.270822Z", "completed_at": "2025-10-17T00:06:49.277457Z"}, {"name": "execute", "started_at": "2025-10-17T00:06:49.277793Z", "completed_at": "2025-10-17T00:06:55.250550Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 5.987069606781006, "adapter_response": {"_message": "CREATE TABLE (90.0 rows, 12.4 MiB processed)", "code": "CREATE TABLE", "rows_affected": 90, "bytes_processed": 12995495, "bytes_billed": 31457280, "location": "US", "project_id": "applylens-gmail-1759983601", "job_id": "00087e4a-d954-45f2-aca4-db7b79c14253", "slot_ms": 112030}, "message": "CREATE TABLE (90.0 rows, 12.4 MiB processed)", "failures": null, "unique_id": "model.applylens_analytics.mart_email_activity_daily", "compiled": true, "compiled_code": "\n\n/*\n  Daily email activity metrics.\n  \n  Metrics:\n  - Total messages received per day\n  - Unique senders per day\n  - Average message size\n  \n  Used by: Grafana dashboard, API /metrics/profile/activity_daily\n  Updates: Nightly via GitHub Actions\n*/\n\nwith msgs as (\n  select \n    received_ts,\n    from_email,\n    size_bytes\n  from `applylens-gmail-1759983601`.`gmail_raw_stg_gmail_raw_stg`.`stg_gmail__messages`\n  where received_ts is not null\n    and received_ts >= timestamp_sub(current_timestamp(), interval 90 day)\n)\n\nselect\n  date(received_ts) as day,\n  count(*) as messages_count,\n  count(distinct from_email) as unique_senders,\n  round(avg(size_bytes) / 1024, 2) as avg_size_kb,\n  round(sum(size_bytes) / 1024 / 1024, 2) as total_size_mb\nfrom msgs\ngroup by 1", "relation_name": "`applylens-gmail-1759983601`.`gmail_raw_stg_gmail_marts`.`mart_email_activity_daily`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-17T00:06:49.265354Z", "completed_at": "2025-10-17T00:06:49.273717Z"}, {"name": "execute", "started_at": "2025-10-17T00:06:49.274031Z", "completed_at": "2025-10-17T00:06:59.428138Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 10.166069746017456, "adapter_response": {"_message": "CREATE TABLE (61.0 rows, 12.4 MiB processed)", "code": "CREATE TABLE", "rows_affected": 61, "bytes_processed": 12995495, "bytes_billed": 31457280, "location": "US", "project_id": "applylens-gmail-1759983601", "job_id": "4f36def5-c5ca-43db-9379-43d47d0d87d3", "slot_ms": 36686}, "message": "CREATE TABLE (61.0 rows, 12.4 MiB processed)", "failures": null, "unique_id": "model.applylens_analytics.mart_top_senders_30d", "compiled": true, "compiled_code": "\n\n/*\n  Top email senders in the last 30 days.\n  \n  Metrics:\n  - Message count per sender\n  - Total size per sender\n  - First/last message timestamps\n  \n  Used by: Grafana dashboard, API /metrics/profile/top_senders_30d\n  Updates: Nightly via GitHub Actions\n*/\n\nwith windowed as (\n  select \n    from_email,\n    received_ts,\n    size_bytes\n  from `applylens-gmail-1759983601`.`gmail_raw_stg_gmail_raw_stg`.`stg_gmail__messages`\n  where received_ts >= timestamp_sub(current_timestamp(), interval 30 day)\n    and from_email is not null\n)\n\nselect \n  from_email,\n  count(*) as messages_30d,\n  round(sum(size_bytes) / 1024 / 1024, 2) as total_size_mb,\n  min(received_ts) as first_message_at,\n  max(received_ts) as last_message_at,\n  timestamp_diff(max(received_ts), min(received_ts), day) as active_days\nfrom windowed\ngroup by 1\nhaving messages_30d >= 2  -- Filter noise\norder by messages_30d desc\nlimit 100", "relation_name": "`applylens-gmail-1759983601`.`gmail_raw_stg_gmail_marts`.`mart_top_senders_30d`", "batch_results": null}], "elapsed_time": 22.31143355369568, "args": {"favor_state": false, "require_resource_names_without_spaces": true, "show_resource_report": false, "log_level": "info", "write_json": true, "state_modified_compare_more_unrendered_values": false, "vars": {"raw_dataset": "gmail"}, "use_colors": true, "partial_parse_file_diff": true, "warn_error_options": {"error": [], "warn": [], "silence": []}, "static_parser": true, "require_batched_execution_for_custom_microbatch_strategy": false, "empty": false, "require_explicit_package_overrides_for_builtin_materializations": true, "invocation_command": "dbt run --target prod --vars raw_dataset: gmail", "require_yaml_configuration_for_mf_time_spines": false, "cache_selected_only": false, "indirect_selection": "eager", "profiles_dir": "D:\\ApplyLens\\analytics\\dbt", "project_dir": "D:\\ApplyLens\\analytics\\dbt", "send_anonymous_usage_stats": true, "target": "prod", "partial_parse": true, "quiet": false, "validate_macro_args": false, "log_path": "D:\\ApplyLens\\analytics\\dbt\\logs", "require_nested_cumulative_type_params": false, "log_level_file": "debug", "print": true, "log_format": "default", "show_all_deprecations": false, "macro_debugging": false, "state_modified_compare_vars": false, "use_colors_file": true, "version_check": true, "log_format_file": "debug", "skip_nodes_if_on_run_start_fails": false, "upload_to_artifacts_ingest_api": false, "use_fast_test_edges": false, "introspect": true, "source_freshness_run_project_hooks": true, "defer": false, "strict_mode": false, "printer_width": 80, "populate_cache": true, "which": "run", "require_all_warnings_handled_by_warn_error": false, "select": [], "require_generic_test_arguments_property": true, "log_file_max_bytes": 10485760, "exclude": []}}