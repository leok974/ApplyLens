# Production Nginx Configuration for applylens.app
# This config works with Cloudflare Tunnel (HTTP backend, Cloudflare handles SSL)

# WebSocket upgrade map
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# Main Server Block
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name applylens.app www.applylens.app _;

    # Basic Settings
    client_max_body_size 25m;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    # Upgrade any insecure requests to HTTPS (fixes mixed content issues)
    add_header Content-Security-Policy "upgrade-insecure-requests" always;
    
    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml font/truetype font/opentype application/vnd.ms-fontobject image/svg+xml;
    gzip_min_length 256;

    # =============================================================================
    # HEALTH CHECKS
    # =============================================================================
    location = /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "ok\n";
    }

    location = /healthz {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "ok\n";
    }

    # =============================================================================
    # SEO & ROBOTS
    # =============================================================================
    location = /robots.txt {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nAllow: /\n";
    }

    location = /sitemap.xml {
        access_log off;
        add_header Content-Type application/xml;
        return 200 "<?xml version='1.0' encoding='UTF-8'?><urlset xmlns='http://www.sitemaps.org/schemas/sitemap/0.9'><url><loc>https://applylens.app/web/</loc></url></urlset>";
    }

    # =============================================================================
    # ROOT REDIRECT
    # =============================================================================
    location = / {
        return 302 $scheme://$host/web/;
    }

    # =============================================================================
    # WEB APPLICATION (React SPA - Static Files with Fallback)
    # =============================================================================
    
    # Static assets - NO fallback, these must exist
    location ~ ^/web/assets/ {
        # Rewrite to strip /web prefix before proxying
        rewrite ^/web(/assets/.*)$ $1 break;
        proxy_pass http://web:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Cache static assets aggressively
        proxy_cache_valid 200 1y;
        proxy_cache_bypass 0;
        add_header Cache-Control "public, immutable";
        
        # NO error interception for assets
        proxy_intercept_errors off;
    }
    
    location /web/ {
        # Normalize /web -> /web/
        if ($request_uri = "/web") {
            return 301 /web/;
        }

        # Proxy to production web container (nginx serving static files)
        proxy_pass http://web:80/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        
        # SPA Routing Support
        proxy_intercept_errors on;
        error_page 404 = @web_fallback;
        
        # Caching for static assets
        proxy_cache_bypass $http_upgrade;
        proxy_no_cache $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # SPA Fallback - serve index.html for client-side routes
    location @web_fallback {
        proxy_pass http://web:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # =============================================================================
    # API ENDPOINTS
    # =============================================================================
    
    # API Health Check
    location /api/healthz {
        proxy_pass http://api:8003/healthz;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        access_log off;
    }

    # API Routes
    location /api/ {
        proxy_pass http://api:8003/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        
        # WebSocket support (for potential real-time features)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # Timeouts for API operations
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
    }

    # =============================================================================
    # OAUTH CALLBACKS (Critical - exact path matching)
    # =============================================================================
    location /api/auth/google/callback {
        proxy_pass http://api:8003/auth/google/callback;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        
        # OAuth needs longer timeout
        proxy_connect_timeout 60s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
    }

    # =============================================================================
    # API DOCUMENTATION
    # =============================================================================
    location /docs {
        proxy_pass http://api:8003/docs;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /openapi.json {
        proxy_pass http://api:8003/openapi.json;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # =============================================================================
    # MONITORING (Protected - Basic Auth in Production)
    # =============================================================================
    location /grafana/ {
        # TODO: Enable in production
        # auth_basic "Monitoring Access";
        # auth_basic_user_file /etc/nginx/.htpasswd;
        
        proxy_pass http://grafana:3000/;
        proxy_set_header X-Forwarded-Prefix /grafana;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket for live updates
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    location /kibana/ {
        # TODO: Enable in production
        # auth_basic "Analytics Access";
        # auth_basic_user_file /etc/nginx/.htpasswd;
        
        proxy_pass http://kibana:5601/kibana/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket for live updates
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    location /prometheus/ {
        # TODO: Enable in production
        # auth_basic "Metrics Access";
        # auth_basic_user_file /etc/nginx/.htpasswd;
        
        proxy_pass http://prometheus:9090/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # =============================================================================
    # SECURITY
    # =============================================================================
    
    # Deny access to hidden files
    location ~ /\. {
        deny all;
        return 404;
    }

    # Service Worker blocking (if not used)
    location = /service-worker.js {
        add_header Content-Type application/javascript;
        return 410 "Service workers are not used in this application";
    }

    location = /sw.js {
        add_header Content-Type application/javascript;
        return 410 "Service workers are not used in this application";
    }

    # =============================================================================
    # CATCH-ALL: Redirect SPA routes to /web/
    # =============================================================================
    # Any unmatched path should redirect to /web/ + path for React Router to handle
    location / {
        return 302 $scheme://$host/web$request_uri;
    }
}
