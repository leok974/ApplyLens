"""
Test that model changes have corresponding Alembic migrations.

This prevents model drift where SQLAlchemy models are changed but
migrations are not created, causing production schema mismatches.
"""

import os
import re
import subprocess
from pathlib import Path

import pytest


@pytest.mark.unit
def test_models_have_no_unapplied_migrations():
    """
    Verify that all SQLAlchemy model changes have corresponding Alembic migrations.

    Runs `alembic revision --autogenerate` and checks that no new migration
    file is generated, indicating models and migrations are in sync.

    If this test fails, it means model changes were made without creating
    a migration. Run: alembic revision --autogenerate -m "describe change"
    """
    # Change to API directory where alembic.ini exists
    api_dir = Path(__file__).parent.parent.parent

    result = subprocess.run(
        ["alembic", "revision", "--autogenerate", "-m", "_check_drift"],
        capture_output=True,
        text=True,
        cwd=api_dir,
    )

    generated_file = None
    try:
        # Check if autogenerate found any changes
        assert "Generating" not in result.stdout, (
            f"Unapplied model changes detected! Alembic autogenerate found differences.\n"
            f"Create a migration with: alembic revision --autogenerate -m 'describe your changes'\n\n"
            f"Output:\n{result.stdout}\n{result.stderr}"
        )

        # Also check for "No changes" message which indicates models match migrations
        if result.returncode == 0:
            assert (
                "No changes in schema detected" in result.stdout
                or "Generating" not in result.stdout
            ), f"Unexpected alembic output:\n{result.stdout}\n{result.stderr}"
    finally:
        # Clean up any accidentally generated migration file
        for line in result.stdout.splitlines():
            match = re.search(r"Generating (.+alembic/versions/.+\.py)", line)
            if match:
                generated_file = match.group(1)
                file_path = api_dir / generated_file.replace(str(api_dir) + os.sep, "")
                if file_path.exists():
                    # Use git to remove the file if it was created
                    subprocess.run(
                        ["git", "checkout", "--", str(file_path)],
                        cwd=api_dir,
                        capture_output=True,
                    )
                    # If not in git, just delete it
                    if file_path.exists():
                        file_path.unlink()
                    print(f"Cleaned up autogenerated migration file: {file_path}")
