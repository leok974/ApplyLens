"""
Artifacts store for agent outputs.

Persists JSON, Markdown, and other artifacts generated by agents
to a structured filesystem hierarchy.
"""

import json
import os
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional, Union


class ArtifactsStore:
    """
    Store for agent artifacts (JSON, Markdown, etc.).
    
    Directory structure:
        agent/artifacts/
        ├── inbox_triage/
        │   ├── 2025-10-17T10-30-00.json
        │   └── 2025-10-17T10-30-00.md
        ├── knowledge_update/
        │   ├── synonyms.diff.json
        │   └── routing_rules.diff.json
        └── insights/
            ├── 2025-W42.md
            └── 2025-W41.md
    """
    
    def __init__(self, base_path: Optional[str] = None):
        """
        Initialize artifacts store.
        
        Args:
            base_path: Base directory for artifacts (default: agent/artifacts/)
        """
        if base_path is None:
            # Default to agent/artifacts/ in project root
            base_path = os.path.join(
                os.path.dirname(os.path.dirname(os.path.dirname(__file__))),
                "agent",
                "artifacts"
            )
        
        self.base_path = Path(base_path)
        self.base_path.mkdir(parents=True, exist_ok=True)
    
    def write(
        self, 
        path: str, 
        content: str, 
        agent_name: Optional[str] = None
    ) -> str:
        """
        Write text content to artifact file.
        
        Args:
            path: Relative path (e.g., 'inbox-triage.md', 'insights/2025-W42.md')
            content: Text content to write
            agent_name: Optional agent name to prefix path
        
        Returns:
            Absolute path to written file
        
        Examples:
            store.write("report.md", "# Report\\n...")
            store.write("insights/2025-W42.md", "...", agent_name="insights_writer")
        """
        if agent_name:
            full_path = self.base_path / agent_name / path
        else:
            full_path = self.base_path / path
        
        # Create parent directories if needed
        full_path.parent.mkdir(parents=True, exist_ok=True)
        
        # Write content
        with open(full_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return str(full_path)
    
    def write_json(
        self, 
        path: str, 
        data: Union[Dict, List], 
        agent_name: Optional[str] = None,
        indent: int = 2
    ) -> str:
        """
        Write JSON data to artifact file.
        
        Args:
            path: Relative path (e.g., 'synonyms.diff.json')
            data: Data to serialize as JSON
            agent_name: Optional agent name to prefix path
            indent: JSON indentation (default: 2)
        
        Returns:
            Absolute path to written file
        
        Examples:
            store.write_json("diff.json", {"added": [...], "removed": [...]})
        """
        content = json.dumps(data, indent=indent, ensure_ascii=False)
        return self.write(path, content, agent_name=agent_name)
    
    def read(self, path: str, agent_name: Optional[str] = None) -> str:
        """
        Read text content from artifact file.
        
        Args:
            path: Relative path
            agent_name: Optional agent name to prefix path
        
        Returns:
            File content as string
        
        Raises:
            FileNotFoundError: If file doesn't exist
        """
        if agent_name:
            full_path = self.base_path / agent_name / path
        else:
            full_path = self.base_path / path
        
        with open(full_path, 'r', encoding='utf-8') as f:
            return f.read()
    
    def read_json(
        self, 
        path: str, 
        agent_name: Optional[str] = None
    ) -> Union[Dict, List]:
        """
        Read JSON data from artifact file.
        
        Args:
            path: Relative path
            agent_name: Optional agent name to prefix path
        
        Returns:
            Parsed JSON data
        
        Raises:
            FileNotFoundError: If file doesn't exist
            json.JSONDecodeError: If file is not valid JSON
        """
        content = self.read(path, agent_name=agent_name)
        return json.loads(content)
    
    def list_files(
        self, 
        agent_name: Optional[str] = None,
        pattern: str = "*"
    ) -> List[str]:
        """
        List artifact files for an agent.
        
        Args:
            agent_name: Agent name (None = all agents)
            pattern: Glob pattern (default: "*")
        
        Returns:
            List of relative paths
        
        Examples:
            store.list_files("inbox_triage")
            store.list_files("insights", pattern="*.md")
        """
        if agent_name:
            search_path = self.base_path / agent_name
        else:
            search_path = self.base_path
        
        if not search_path.exists():
            return []
        
        files = search_path.glob(pattern)
        return [
            str(f.relative_to(self.base_path))
            for f in files
            if f.is_file()
        ]
    
    def delete(self, path: str, agent_name: Optional[str] = None) -> bool:
        """
        Delete an artifact file.
        
        Args:
            path: Relative path
            agent_name: Optional agent name to prefix path
        
        Returns:
            True if file was deleted, False if it didn't exist
        """
        if agent_name:
            full_path = self.base_path / agent_name / path
        else:
            full_path = self.base_path / path
        
        if full_path.exists():
            full_path.unlink()
            return True
        return False
    
    def get_timestamped_path(
        self, 
        prefix: str, 
        extension: str = "json",
        agent_name: Optional[str] = None
    ) -> str:
        """
        Generate timestamped artifact path.
        
        Args:
            prefix: File prefix (e.g., 'run', 'diff')
            extension: File extension without dot (default: 'json')
            agent_name: Optional agent name for directory structure
        
        Returns:
            Relative path with timestamp
        
        Examples:
            store.get_timestamped_path("run", "json")
            # Returns: "2025-10-17T10-30-15.json"
            
            store.get_timestamped_path("report", "md", agent_name="insights")
            # Returns: "insights/2025-10-17T10-30-15.md"
        """
        timestamp = datetime.utcnow().strftime("%Y-%m-%dT%H-%M-%S")
        filename = f"{prefix}_{timestamp}.{extension}"
        
        if agent_name:
            return f"{agent_name}/{filename}"
        return filename
    
    def get_weekly_path(
        self, 
        prefix: str = "", 
        extension: str = "md"
    ) -> str:
        """
        Generate ISO week-based path (e.g., for weekly reports).
        
        Args:
            prefix: Optional prefix (default: "")
            extension: File extension without dot (default: 'md')
        
        Returns:
            Path with ISO week format (YYYY-WXX)
        
        Examples:
            store.get_weekly_path()
            # Returns: "2025-W42.md"
            
            store.get_weekly_path("report")
            # Returns: "report_2025-W42.md"
        """
        iso_week = datetime.utcnow().strftime("%Y-W%V")
        if prefix:
            return f"{prefix}_{iso_week}.{extension}"
        return f"{iso_week}.{extension}"


# Singleton instance
artifacts_store = ArtifactsStore()
