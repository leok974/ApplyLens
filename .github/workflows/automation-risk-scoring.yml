name: Nightly Risk Scoring

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode (1=dry run, 0=execute updates)'
        required: true
        default: '0'
        type: choice
        options:
          - '0'
          - '1'
      batch_size:
        description: 'Batch size for processing'
        required: false
        default: '500'
  
  # Nightly at 3 AM UTC
  schedule:
    - cron: '0 3 * * *'

jobs:
  risk-scoring:
    name: Compute Email Risk Scores
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: services/api
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
      
      - name: Check database schema version
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "Checking database schema version..."
          python -c "
          from app.utils.schema_guard import require_min_migration, get_current_migration
          current = get_current_migration()
          print(f'Current migration: {current}')
          try:
              require_min_migration('0012_add_emails_features_json', 'email automation system fields')
              print('✓ Schema version check passed')
          except RuntimeError as e:
              print(f'✗ Schema check failed: {e}')
              exit(1)
          "
      
      - name: Run risk scoring analysis
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DRY_RUN: ${{ github.event.inputs.dry_run || '0' }}
          BATCH_SIZE: ${{ github.event.inputs.batch_size || '500' }}
        run: |
          echo "Starting risk scoring analysis..."
          echo "Mode: $([ "$DRY_RUN" = "1" ] && echo "DRY RUN" || echo "LIVE UPDATE")"
          echo "Batch size: $BATCH_SIZE"
          python scripts/analyze_risk.py
      
      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: risk-scoring-results
          path: services/api/risk_scoring_*.log
          retention-days: 7
      
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Nightly Risk Scoring Job Failed',
              body: `Risk scoring job failed on ${new Date().toISOString()}. Check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.`,
              labels: ['automation', 'ci-failure']
            })
