name: Backfill Bills Due Dates

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode (1=dry run, 0=execute updates)'
        required: true
        default: '1'
        type: choice
        options:
          - '1'
          - '0'
      batch_size:
        description: 'Batch size for bulk updates'
        required: false
        default: '500'
      es_index:
        description: 'Elasticsearch index name'
        required: false
        default: 'gmail_emails_v2'
  
  # Optional: Run nightly to catch any missed bills
  # schedule:
  #   - cron: '0 4 * * *'  # 4 AM UTC daily

jobs:
  backfill:
    name: Backfill Bill Due Dates
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: services/api
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
      
      - name: Check database schema version
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "Checking database schema version..."
          python -c "
          from app.utils.schema_guard import require_min_migration, get_current_migration
          current = get_current_migration()
          print(f'Current migration: {current}')
          try:
              require_min_migration('0012_add_emails_features_json', 'email automation system fields')
              print('✓ Schema version check passed')
          except RuntimeError as e:
              print(f'✗ Schema check failed: {e}')
              exit(1)
          "
      
      - name: Verify Elasticsearch connectivity
        env:
          ES_URL: ${{ secrets.ES_URL }}
          ES_API_KEY: ${{ secrets.ES_API_KEY }}
        run: |
          echo "Testing Elasticsearch connection..."
          curl -f "$ES_URL" || echo "⚠️  Warning: Could not connect to Elasticsearch"
      
      - name: Run backfill (dry run check)
        if: github.event.inputs.dry_run == '1' || github.event_name == 'schedule'
        env:
          ES_URL: ${{ secrets.ES_URL }}
          ES_API_KEY: ${{ secrets.ES_API_KEY }}
          ES_EMAIL_INDEX: ${{ github.event.inputs.es_index || 'gmail_emails_v2' }}
          DRY_RUN: '1'
          BATCH: ${{ github.event.inputs.batch_size || '500' }}
        run: |
          echo "🔍 Running in DRY RUN mode..."
          python scripts/backfill_bill_dates.py
      
      - name: Run backfill (live update)
        if: github.event.inputs.dry_run == '0'
        env:
          ES_URL: ${{ secrets.ES_URL }}
          ES_API_KEY: ${{ secrets.ES_API_KEY }}
          ES_EMAIL_INDEX: ${{ github.event.inputs.es_index || 'gmail_emails_v2' }}
          DRY_RUN: '0'
          BATCH: ${{ github.event.inputs.batch_size || '500' }}
        run: |
          echo "⚠️  Running in LIVE UPDATE mode..."
          python scripts/backfill_bill_dates.py
      
      - name: Summary
        run: |
          echo "## Backfill Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Mode**: $(if [ '${{ github.event.inputs.dry_run }}' = '0' ]; then echo 'LIVE UPDATE ⚠️'; else echo 'DRY RUN 🔍'; fi)" >> $GITHUB_STEP_SUMMARY
          echo "- **Index**: ${{ github.event.inputs.es_index || 'gmail_emails_v2' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Batch Size**: ${{ github.event.inputs.batch_size || '500' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

  # Optional: Post-backfill verification
  verify:
    name: Verify Backfill Results
    runs-on: ubuntu-latest
    needs: backfill
    if: github.event.inputs.dry_run == '0'
    
    steps:
      - name: Check bills with dates
        env:
          ES_URL: ${{ secrets.ES_URL }}
          ES_API_KEY: ${{ secrets.ES_API_KEY }}
          ES_EMAIL_INDEX: ${{ github.event.inputs.es_index || 'gmail_emails_v2' }}
        run: |
          echo "Checking bills with dates populated..."
          curl -s -X POST "$ES_URL/$ES_EMAIL_INDEX/_search" \
            -H 'Content-Type: application/json' \
            -H "Authorization: ApiKey $ES_API_KEY" \
            -d '{"query":{"bool":{"must":[{"term":{"category":"bills"}},{"exists":{"field":"dates"}}]}},"size":0}' \
            | python -c "import sys, json; data=json.load(sys.stdin); print(f'Bills with dates: {data[\"hits\"][\"total\"][\"value\"]}')"
