name: API Tests

on:
  push:
    branches: [main, develop, phase-*, polish]
    paths:
      - "services/api/**"
      - "infra/docker-compose.test.yml"
      - ".github/workflows/api-tests.yml"
  pull_request:
    paths:
      - "services/api/**"
      - "infra/docker-compose.test.yml"
      - ".github/workflows/api-tests.yml"

jobs:
  # Unit tests - Fast, no external services (except PostgreSQL for DB layer)
  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # PostgreSQL service container
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: applylens
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d applylens"
          --health-interval=3s
          --health-timeout=3s
          --health-retries=20

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5433/applylens
      ENV: test
      ES_ENABLED: false
      USE_MOCK_GMAIL: true
      CREATE_TABLES_ON_STARTUP: "0"
      PIP_CACHE_DIR: ~/.cache/pip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
          cache-dependency-path: services/api/setup.py

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install Python dependencies
        working-directory: services/api
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test]

      - name: Wait for PostgreSQL
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..60}; do
            if pg_isready -h localhost -p 5433 -U postgres -d applylens; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Attempt $i/60: PostgreSQL not ready yet..."
            sleep 1
          done
          pg_isready -h localhost -p 5433 -U postgres -d applylens || exit 1

      - name: Run Alembic migrations
        working-directory: services/api
        run: |
          echo "Applying database migrations..."
          alembic upgrade head
          echo "Migrations applied successfully!"

      - name: Run tests with coverage
        working-directory: services/api
        run: |
          echo "Running unit test suite..."
          pytest -q tests/unit tests/api/test_automation_endpoints.py tests/api/test_applications_api.py tests/api/test_query_filters.py \
            tests/test_agents_core.py tests/test_agent_warehouse.py \
            -m "not integration" \
            --ignore=tests/unit/test_api_happy.py \
            --ignore=tests/unit/test_classifier.py \
            --ignore=tests/unit/test_formatting.py \
            --ignore=tests/unit/test_health_and_search.py \
            --ignore=tests/unit/test_models_vs_migrations.py \
            --ignore=tests/unit/test_risk_scoring.py \
            --ignore=tests/unit/test_security_policy.py \
            --ignore=tests/unit/test_validation.py \
            --cov=app --cov-report=term-missing --cov-report=xml --cov-report=html --cov-fail-under=30

      - name: Save coverage XML
        if: always()
        working-directory: services/api
        run: |
          echo "Coverage report generated at coverage.xml"
          ls -lh coverage.xml || echo "No coverage.xml found"

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-coverage-xml
          path: services/api/coverage.xml

      - name: Upload to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: services/api/coverage.xml
          flags: api
          fail_ci_if_error: true

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            services/api/htmlcov/
            services/api/coverage.xml
          retention-days: 7

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        continue-on-error: true
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}
          MINIMUM_GREEN: 70
          MINIMUM_ORANGE: 50

  # Integration tests - Require external services (PostgreSQL + Elasticsearch)
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    # Service containers for integration tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: applylens
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d applylens"
          --health-interval=3s
          --health-timeout=3s
          --health-retries=20

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        ports:
          - 9200:9200
        options: >-
          --health-cmd="curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=20

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5433/applylens
      ENV: test
      ES_ENABLED: true
      ES_HOST: localhost
      ES_PORT: 9200
      USE_MOCK_GMAIL: true
      CREATE_TABLES_ON_STARTUP: "0"
      PIP_CACHE_DIR: ~/.cache/pip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
          cache-dependency-path: services/api/setup.py

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install Python dependencies
        working-directory: services/api
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test]

      - name: Wait for services
        run: |
          echo "Waiting for PostgreSQL..."
          for i in {1..60}; do
            if pg_isready -h localhost -p 5433 -U postgres -d applylens; then
              echo "PostgreSQL is ready!"
              break
            fi
            sleep 1
          done
          
          echo "Waiting for Elasticsearch..."
          for i in {1..60}; do
            if curl -f http://localhost:9200/_cluster/health >/dev/null 2>&1; then
              echo "Elasticsearch is ready!"
              break
            fi
            sleep 1
          done

      - name: Verify Elasticsearch
        run: |
          curl -X GET "http://localhost:9200/_cluster/health?pretty"
          curl -X GET "http://localhost:9200/?pretty"

      - name: Run Alembic migrations
        working-directory: services/api
        run: |
          echo "Applying database migrations..."
          alembic upgrade head
          echo "Migrations applied successfully!"

      - name: Run integration tests
        working-directory: services/api
        run: |
          echo "Running integration test suite..."
          pytest -v tests/integration \
            -m integration \
            --cov=app --cov-report=term-missing --cov-report=xml

      - name: Archive integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            services/api/coverage.xml
          retention-days: 7

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install linting tools
        run: |
          pip install ruff black isort mypy

      - name: Run ruff
        working-directory: services/api
        run: ruff check app/ tests/ --output-format=github

      - name: Check code formatting with black
        working-directory: services/api
        run: black --check app/ tests/

      - name: Check import sorting with isort
        working-directory: services/api
        run: isort --check-only app/ tests/

      - name: Type check with mypy (non-blocking)
        working-directory: services/api
        continue-on-error: true
        run: mypy app/
