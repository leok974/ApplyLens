# Phase 5.4 CI Configuration - PR6
# Runs tests and quality gates on PR/push

name: Phase 5.4 - Interventions Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'services/api/app/intervene/**'
      - 'services/api/app/eval/**'
      - 'services/api/tests/**'
      - '.github/workflows/interventions.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'services/api/app/intervene/**'
      - 'services/api/app/eval/**'
      - 'services/api/tests/**'

env:
  PYTHON_VERSION: '3.11'
  INTERVENTIONS_ENABLED: 'false'  # Disable real interventions in tests

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: applylens_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: services/api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run intervention tests
        working-directory: services/api
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/applylens_test
          TESTING: 'true'
        run: |
          # Run Phase 5.4 specific tests
          pytest tests/test_incident_lifecycle.py -v
          pytest tests/test_issue_adapters.py -v
          pytest tests/test_templates.py -v
          pytest tests/test_actions.py -v
          pytest tests/test_executor.py -v
          pytest tests/test_bridges.py -v
          pytest tests/test_golden_templates.py -v
          pytest tests/test_integration_mocked.py -v
      
      - name: Run all tests with coverage
        working-directory: services/api
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/applylens_test
          TESTING: 'true'
        run: |
          pytest tests/ --cov=app/intervene --cov=app/eval --cov-report=xml --cov-report=term
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./services/api/coverage.xml
          flags: interventions
          name: interventions-coverage
  
  quality-gates:
    name: Run Quality Gates
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: applylens_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: services/api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run quality gates (without incident creation)
        working-directory: services/api
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/applylens_test
          INTERVENTIONS_ENABLED: 'false'
        run: |
          # Run gates but don't create incidents in CI
          python -m app.eval.run_gates --fail-on-warning --format json > gate_report.json
        continue-on-error: true
      
      - name: Upload gate report
        uses: actions/upload-artifact@v4
        with:
          name: gate-report
          path: services/api/gate_report.json
  
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: services/api
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy
      
      - name: Run ruff
        working-directory: services/api
        run: |
          ruff check app/intervene/ app/eval/
      
      - name: Run mypy
        working-directory: services/api
        run: |
          mypy app/intervene/ app/eval/ --ignore-missing-imports
        continue-on-error: true
